---
title: "Code, Psuedo-code, and GenAI"
subtitle: "Computation best practices using tools for difficult tasks"
format: 
  revealjs:
    theme: custom-light.scss
    css: [timer.css, checklist.css]
    preview-links: false
    incremental: true
    chalkboard: 
      buttons: false
    auto-animate-easing: ease-in-out
    auto-animate-unmatched: true
    auto-animate-duration: 0.8
    menu:
      side: right
      width: half
    html-math-method: mathjax
from: markdown+emoji
author: 
  - name: Colton Baumler
    orcid: 0000-0002-5926-7792
    email: ccbaumler@ucdavis.edu
    affiliations: University of California, Davis
date: last-modified
date-format: "dddd, [the] D[<sup style='font-size:65%;font-style:italic;'>th</sup>] [of] MMMM, YYYY"
execute:
  echo: true
  warning: false
  message: false
---

# Overview

::: {.notes}

The theme of this discussion of homework! Using these things to help **you** learn better

:::

::: {.nonincremental}

- Discuss code and psuedo-code
- Discuss the use of GenAI

:::

# [Learning objectives]{.small}

::: {.notes}

This discussion section is for you to learn to:

:::


- Describe the differences between code and psuedo-code
- Distinguish when and how to write psuedo-code verses code
- Know how to implement psuedo-code in all your future computational work
- Use GenAI as a code tutor through critical evaluation of prompts and responses
- Integrate psuedo-code into GenAI prompts for enhanced GenAI code tutoring

# Tangent!

- Housekeeping
- Intros!

## Please review the links

### Housekeeping

- Navigation, `cd` and `ls`, [terminus](https://www.mprat.org/Terminus/){target="_blank"}

- [Homework repository file structure](https://github.com/ccbaumler/sts115_coltonbaumler/tree/main/submitted_assignment_coltonbaumler){target="_blank"}

- [SSH key and GitHub Integration](https://hackmd.io/@ccbaumler/SJaCVWJDkx){target="_blank"}
  - [An expansion to the course reader](https://ucdavisdatalab.github.io/adventures_in_data_science/chapters/02_version-control.html#connecting-to-github-with-ssh){target="_blank"}

- [First Lecture Supplementary information](https://hackmd.io/@ccbaumler/r1Zxa-ywJx){target="_blank"}

- [Git and Github Game](https://learngitbranching.js.org/){target="_blank"}

## Talk to your neighbors—they might help with your computer too! {.smaller}

### Introductions

::: {.notes}

The night sky here is highly visible and the town is extremely walkable/bikable!!!

I have been playing DnD for decades and am excited to indoctrinate my two children soon!!!!!

Assign groups and each minute thirty call out for the next person to talk

:::

To your neighbors:

Please share:

::: {.fragment}

::: {.nonincremental}

- something you like about Davis

  - E.g. something you like to do at the university, city, or neighboring communities

:::

:::

::: {.fragment}

::: {.nonincremental}

- something about your interests

  - Are you in a club or organization?
  - Have you attended any interesting events?
  - What’s the best book, movie, or show you’ve enjoyed recently?

:::

:::

```{r}
#| echo: false
countdown::countdown(minutes = 5, seconds = 0, warn_when = 15, 
                     right = "0%", top = "15%",
                     blink_colon = TRUE,
                     play_sound = "audio/smb_coin.wav",
                     id = "special_timer")
```

# Psuedo-code

::: {.nonincremental}

- Define with an example and with words
- Understand the difference between code and psuedo-code
- Apply our new understanding to create an order of operations for a computational task

:::

## Understand the need -- create psuedo-code -- only then, write the code

::: panel-tabset

#### Plot

```{r}
#| eval: true
#| echo: false
species_colors <- c("black", "red", "green")  # Setosa, Versicolor, Virginica
iris_colors <- species_colors[as.numeric(iris$Species)]

plot(iris$Sepal.Length, iris$Sepal.Width, main = "Sepal Length vs. Sepal Width",
     xlab = "Sepal Length", ylab = "Sepal Width", col = iris_colors)
legend("topleft", 
       legend = c(unique(iris$Species)),
       fill = species_colors, 
       title = "Legend")
```

#### Psuedo-code

:::: {.nonincremental}

1. Use Base R dataset, `iris`
2. Create a scatterplot

    - Use only `Sepal.Length` and `Sepal.Width` for visual comparison
    - Color the points by `Species`
    - Add a legend

::::

#### Code

```{r}
#| eval: false
#| echo: true
species_colors <- c("black", "red", "green")  # Setosa, Versicolor, Virginica
iris_colors <- species_colors[as.numeric(iris$Species)]

plot(iris$Sepal.Length, iris$Sepal.Width, main = "Sepal Length vs. Sepal Width",
     xlab = "Sepal Length", ylab = "Sepal Width", col = iris_colors)
legend("topleft", 
       legend = c(unique(iris$Species)),
       fill = species_colors, 
       title = "Legend")
```

:::

## What is code? What is pseudo-code?

### Quick write

::: {.center-xy}

[In one or two sentences, <br></br> ***what is code and psuedo-code to you?***]{style="font-size: 2em;" .fragment}

:::

```{r}
#| echo: false
countdown::countdown(minutes = 1, seconds = 0, warn_when = 15, 
                     right = "0%", top = "10%",
                     blink_colon = TRUE,
                     play_sound = "audio/smb_coin.wav",
                     id = "special_timer")
```

## Code is instructional communication with a machine

::: {.notes}

Bash is not a programming language, it is a command-line interpreter.

:::

- coding is writing instructions for computers to execute

- this is a form of machine automation

- we will use a single high-level coding languages in this course (R)

- For this course, broken code is completely acceptable!

## Psuedo-code is an informal description of an [algorithm]{.hovertext data-hover="a finite sequence of instructions to solve a problem"}

::: {.vscroll}

- The logic and computational processes to complete a task

- Informal psuedo-code (See Supplementary for formal)

- For this course, psuedo-code that understands the concept get an A

:::: {.fragment}

```{r}
#| eval: false
#| echo: true
### Psuedo-code ###
#
#1. Use Base R dataset, `iris`
#2. Create a scatterplot

#    - Use only `Sepal.Length` and `Sepal.Width` for visual comparison
#    - Color the points by `Species`
#    - Add a legend
#
### End ###

species_colors <- c("black", "red", "green")  # Setosa, Versicolor, Virginica
iris_colors <- species_colors[as.numeric(iris$Species)]

plot(iris$Sepal.Length, iris$Sepal.Width, main = "Sepal Length vs. Sepal Width",
     xlab = "Sepal Length", ylab = "Sepal Width", col = iris_colors)
legend("topleft", 
       legend = c(unique(iris$Species)),
       fill = species_colors, 
       title = "Legend")
```

::::

:::

# GenAI

::: {.nonincremental}

- Description of GenAI
- Using GenAI for computational tasks

## What is GenAI

a Large Language Model that has been trained on big data 

- gigabytes to terabytes of training data
- billions to trillions of words
- to create a distribution of probabilities connecting words and elements of a language
- millions of queries a day

## Use it

You probably use google, stackoverflow, and youtube

- Use chatGPT in a similar way
- Critically apply it to the problems and think about breaking the question down to atomic units like in a psuedocode
- Write an outline (psuedo-code) of what you need and feed it into the GenAI model

## Apply psuedo-code as GenAI prompt

::: panel-tabset

#### Pseudo-code

:::: {.nonincremental}

1. Use Base R dataset, iris
2. Create a scatterplot

    - Use only Sepal.Length and Sepal.Width for visual comparison
    - Color the points by Species
    - Add a legend
 
::::

#### ChatGPT Output

:::: {.vscroll}

Here's how to create the scatterplot in R using the iris dataset, as per your specifications:

```{r}
#| eval: false
#| echo: true
# Create a scatterplot
plot(iris$Sepal.Length, iris$Sepal.Width, 
     col = as.numeric(iris$Species), # Color points by Species
     pch = 19, # Solid circle points
     xlab = "Sepal Length", 
     ylab = "Sepal Width", 
     main = "Sepal Length vs Sepal Width by Species")

# Add a legend
legend("topright", 
       legend = levels(iris$Species), 
       col = 1:length(levels(iris$Species)), 
       pch = 19, 
       title = "Species")
```

Explanation:

::::: {.nonincremental}

    1. plot function:
        - iris$Sepal.Length and iris$Sepal.Width are used for the x and y axes, respectively.
        - col = as.numeric(iris$Species) assigns a unique color to each species.
        - pch = 19 specifies solid circle points.
        - Labels and title are added with xlab, ylab, and main.

    2. legend function:
        - legend adds a legend at the top right.
        - levels(iris$Species) retrieves the unique species names.
        - col specifies the corresponding colors.
        - title names the legend box.

:::::

Run this code in an R environment to generate the scatterplot!

::::

#### Plot

```{r}
#| eval: true
#| echo: false
# Create a scatterplot
plot(iris$Sepal.Length, iris$Sepal.Width, 
     col = as.numeric(iris$Species), # Color points by Species
     pch = 19, # Solid circle points
     xlab = "Sepal Length", 
     ylab = "Sepal Width", 
     main = "Sepal Length vs Sepal Width by Species")

# Add a legend
legend("topright", 
       legend = levels(iris$Species), 
       col = 1:length(levels(iris$Species)), 
       pch = 19, 
       title = "Species")
```

:::

# A Final activity

## 

### Think-Pair-Share

::: {.columns}

:::: {.column}

In a group, compare and contrast code, psuedocode, and GenAI.

Explain when and how to use code and psuedocode and GenAI to answer a problem

::::

:::: {.column}

Create this plot

![Distance heatmap of US Cities](uscities-heatmap.png)

::::

:::

# Supplementary

## Informal GenAI policy

An additional topic discussed was homework and GenAI (E.g., chatGPT). We will not police the usage of GenAI; throughout the first half of this course, you may find that GenAI can complete your assignment for you! After the midterm, the assignments become much more conceptual and GenAI will struggle to provide an answer to them. Also, the use of GenAI will circumvent the necessary practice for you to hone your data science skills. We will discuss this topic more on Tuesday.

## Informal Homework policy

Homework will not be graded on whether or not the code will run, but on the logic of the code. That is, The grading will be on the concept behind the code you submit. Is it sound logic? Are all the steps included? So on. If you have a few bugs in the script that prevent it from running or answering the question correctly, you will not be docked points. We will discuss this idea more on Tuesday as well.

## Formal Problem Description

Given a finite set of species $S = \{s_1, s_2, s_3\}$ representing Setosa, Versicolor, and Virginica, respectively, we map each species to a unique color $C = \{c_1, c_2, c_3\}$ (e.g., black, red, green). We then construct a function to color each data point in the dataset $D$, where $D \subseteq \mathbb{R}^2 \times S$, and plot these points in 2D space.

## Formal Pseudocode 

::: {.vscroll}

INPUT: 
    - Species set $S = \{s_1, s_2, s_3\}$ (Setosa, Versicolor, Virginica)
    - Color set $C = \{c_1, c_2, c_3\}$ (e.g., black, red, green)
    - Dataset $D = \{(x_i, y_i, s_i) \mid x_i, y_i \in \mathbb{R}, s_i \in S\}$

OUTPUT: 
    - Scatter plot of points $(x_i, y_i)$ with corresponding colors based on $s_i$
    - Legend linking each $s_i \in S$ to $c_i \in C$

1. **Map Species to Colors**
    Define a bijective function $f: S \to C$ such that:
    $$
    f(s_1) = c_1, f(s_2) = c_2, f(s_3) = c_3
    $$

2. **Assign Colors to Data Points**
    For each data point $(x_i, y_i, s_i) \in D$, compute:
    $$
    c_i = f(s_i)
    $$

3. **Create Scatter Plot**
    - Initialize 2D plot $P$ with axes labeled as:
        - $x$-axis: "Sepal Length"
        - $y$-axis: "Sepal Width"
    - For each point $(x_i, y_i, c_i)$, plot $(x_i, y_i)$ using color $c_i$.

4. **Add Legend**
    - Construct a legend mapping $S \to C$ using $f$.
    - Position the legend at the "topleft" corner of $P$.
    - Title the legend as "Legend".

5. **Display Plot**
    Render $P$ with the colored points and legend.

:::
